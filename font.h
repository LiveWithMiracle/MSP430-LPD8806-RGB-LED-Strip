const unsigned char font[65][5] = {
	{0x00,0x00,0x00,0x00,0x00}, // [space]
	{0x00,0x00,0x79,0x00,0x00}, // !
	{0x00,0x60,0x00,0x60,0x00}, // "
	{0x14,0x7F,0x14,0x7F,0x14}, // #
	{0x12,0x2A,0x7F,0x2A,0x24}, // $
	{0x62,0x64,0x08,0x13,0x23}, // %
	{0x36,0x49,0x4D,0x32,0x05}, // &
	{0x00,0x00,0x60,0x00,0x00}, // '
	{0x00,0x1C,0x22,0x41,0x00}, // (
	{0x00,0x5D,0x22,0x5D,0x00}, // )
	{0x2A,0x1C,0x36,0x1C,0x2A}, // *
	{0x08,0x08,0x3E,0x08,0x08}, // +
	{0x00,0x01,0x02,0x00,0x00}, // ,
	{0x00,0x08,0x08,0x08,0x00}, // -
	{0x00,0x00,0x01,0x00,0x00}, // .
	{0x00,0x03,0x1C,0x60,0x00}, // /
	{0x3E,0x43,0x5D,0x61,0x3E}, // 0
	{0x00,0x21,0x7F,0x01,0x00}, // 1
	{0x31,0x43,0x45,0x49,0x31}, // 2
	{0x22,0x41,0x49,0x49,0x36}, // 3
	{0x78,0x08,0x08,0x08,0x7F}, // 4
	{0x79,0x49,0x49,0x49,0x46}, // 5
	{0x3E,0x49,0x49,0x49,0x26}, // 6
	{0x40,0x40,0x47,0x48,0x30}, // 7
	{0x36,0x49,0x49,0x49,0x36}, // 8
	{0x32,0x49,0x49,0x49,0x3E}, // 9
	{0x00,0x00,0x12,0x00,0x00}, // :
	{0x00,0x01,0x12,0x00,0x00}, // ;
	{0x00,0x08,0x14,0x22,0x41}, // <
	{0x00,0x14,0x14,0x14,0x00}, // =
	{0x41,0x22,0x14,0x08,0x00}, // >
	{0x20,0x40,0x45,0x48,0x30}, // ?
	{0x3E,0x41,0x49,0x55,0x3D}, // @
	{0x1F,0x24,0x44,0x24,0x1F}, // A
	{0x7F,0x49,0x49,0x49,0x36}, // B
	{0x3E,0x41,0x41,0x41,0x22}, // C
	{0x7F,0x41,0x41,0x22,0x1C}, // D
	{0x7F,0x49,0x49,0x41,0x41}, // E
	{0x7F,0x48,0x48,0x40,0x40}, // F
	{0x3E,0x41,0x41,0x49,0x4E}, // G
	{0x7F,0x08,0x08,0x08,0x7F}, // H
	{0x41,0x41,0x7F,0x41,0x41}, // I
	{0x42,0x41,0x41,0x7E,0x40}, // J
	{0x7F,0x08,0x14,0x22,0x41}, // K
	{0x7F,0x01,0x01,0x01,0x01}, // L
	{0x3F,0x40,0x38,0x40,0x3F}, // M
	{0x7F,0x10,0x08,0x04,0x7F}, // N
	{0x3E,0x41,0x41,0x41,0x3E}, // O
	{0x7F,0x48,0x48,0x48,0x30}, // P
	{0x3E,0x41,0x45,0x42,0x3D}, // Q
	{0x7F,0x48,0x4C,0x4A,0x31}, // R
	{0x31,0x49,0x49,0x49,0x46}, // S
	{0x40,0x40,0x7F,0x40,0x40}, // T
	{0x7E,0x01,0x01,0x01,0x7E}, // U
	{0x7C,0x02,0x01,0x02,0x7C}, // V
	{0x7E,0x01,0x0E,0x01,0x7E}, // W
	{0x63,0x14,0x08,0x14,0x63}, // X
	{0x60,0x10,0x0F,0x10,0x60}, // Y
	{0x43,0x45,0x49,0x51,0x61}, // Z
	{0x00,0x7F,0x41,0x41,0x00}, // [
	{0x00,0x60,0x1C,0x03,0x00}, // \ (backslash)
	{0x00,0x41,0x41,0x7F,0x00}, // ]
	{0x00,0x20,0x40,0x20,0x00}, // ^
	{0x01,0x01,0x01,0x01,0x01}, // _
	{0x00,0x00,0x40,0x20,0x00}  // `
};

unsigned int cursor_row, cursor_col;
unsigned long cursor_color;
unsigned long cursor_bgcolor;

void initText() {
	cursor_row = 0;
	cursor_col = 0;
	cursor_color = white; // white/on
	cursor_bgcolor = clear; // clear/off
}

void displayChar(unsigned char character) {
	unsigned char cursor_byte;
	unsigned char j;
	unsigned char mask;
	if(character < 0x20 || character > 0x7A) return; // Outside range of font
	if(character >= 0x61) {
		character -= 0x61; // lower case - not implemented yet so uppercase it
	} else {
		character -= 0x20; // just rebase it on the font
	}
	for(i=0;i<5;i++) {
		cursor_byte = font[character][i];
		mask = 0x40;
		for(j=0;j<7;j++) {
			if(cursor_byte & mask) {
				setPixelS(cursor_col, cursor_row+j, cursor_color);
			} else {
				setPixelS(cursor_col, cursor_row+j, cursor_bgcolor);
			}
			mask >>=1;
		}
		cursor_col++;
	}
	cursor_col++; // space between chars
}